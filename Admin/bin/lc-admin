#!/usr/bin/env/ python

import cmd
import os
import commands
import time
import sys

import lc_admin.tools as tools

class Admin(cmd.Cmd):

	def __init__(self):
		cmd.Cmd.__init__(self)
		self.prompt = '(LC_ADMIN)> '
		
	def do_EOF(self, arg):
		return True
	
	def do_resume(self, arg):
		cache_id, path = arg.split()
		os.system("dmsetup message lc-mgr 0 switch_to %s" % (cache_id))
		os.system("dmsetup message lc-mgr 0 resume_cache %s" % (path))

	def help_resume(self):
		print("cache_id path")

	def do_create(self, arg):
		name, device_id, path = arg.split()
		size=commands.getoutput("blockdevv --getsize $s" % (path))
		os.system("dmsetup create %s --table \"0 %s\" lc %s %s" % (name, size, device_id, path))
		
	def help_create(self):
		print("name device_id path")

	def do_remove(self, arg):
		pass # TODO
		
	def help_remove(self):		
		pass # TODO

	def do_attach(self, arg):
		device_id, cache_id = list(map(int, arg.split()))
		device = tools.Device(device_id)
		
		device.lock()
		if(device.cache_id()):		
			print("cache already attached.")
			device.unlock()
			return
			
		# FIXME use lc_ctr
		os.system("echo %d > /sys/module/dm_lc/devices/%d/cache_id" % (cache_id, device_id))
		device.unlock()
		
	def help_attach(self):
		print("device_id cache_id")
		
	def do_detach(self, arg):
		device_id = int(arg)
		device = tools.Device(device_id)
		
		if not device.cache_id():
			print("cache not bound.")
			return

		device.lock()
		cache = tools.Cache(device.cache_id())
		cache.flush_current_buffer()
		
		try:
			while(device.nr_dirty_caches()):	
				print("could not detach the device. %d caches are still dirty remained." % (device.nr_dirty_caches()))
				time.sleep(1)	
				
			# FIXME	
			os.system("echo 0 > /sys/module/dm_lc/devices/%d/cache_id" % (device_id))		
		except KeyboardInterrupt:		
			pass
		
		device.unlock()
		
	def help_detach(self):
		print("device_id") 
		
	def do_ro(self, arg):
		device_id, b = list(map(int, arg.split()))
		device = tools.Device(device_id)
		
		device.lock()
		os.system("echo %d > /sys/module/dm_lc/devices/%d/readonly" % (b, device_id))
		device.unlock()
		
	def help_ro(self):
		print("device_id bool")
		
	def do_quit(self, arg):
		sys.exit(1)
		
	do_q = do_quit

if __name__ == '__main__':
	admin = Admin()

	if len(sys.argv) > 1:
		admin.onecmd( ''.join(sys.argv[1:])  )
	else:	
		admin.cmdloop()
