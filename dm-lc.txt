dm-lc
=====

dm-lc provides write-back log-structured caching.

1. Setup
========
dm-lc is composed of two target_type named lc and lc-mgr.
lc is responsible for creating virtual volumes and controlling ios and 
lc-mgr is reponsible for managing
formatting/initializing/destructing cache devices.
Operating dm-lc through these native interfaces are not recommended.

To easily get started with dm-lc, nice userland tools are provided in
https://github.com/akiradeveloper/dm-lc
where you are also accesible to portable dm-lc kernel code
that supports since 3.2 until before dm-lc staged upstream, 3.x.
please git clone it.
	
To install the tools,
move under Admin directory and run

	python setup.py install

and now you are dm-lc admin.

2. Example scripts
==================
Let's create a virtual volume named myLV
backed by /dev/myVg/myBacking
and use /dev/myCache as a cache device.

myLV -- (backing) /dev/myVg/myBacking
     -- (cache)   /dev/myCache

Step 1
------
Format myCache and
resume myCache

Resuming constructs in-memory structures like hashtables
from the metadata on myCache.

	lc-format-cache /dev/myCache
	lc-resume 1 /dev/myCache

Step 2
------
Create myLV and
attach to myCache

	lc-create myLV 1 /dev/myVg/myBacking
	lc-attach 1 1

Step 3
------
Start userland daemon

dm-lc provides daemon program
that autonomously control the module behavior
such as write-back from myCache to myBacking
which dm-lc calls "migration".

	lc-daemon start

Step 4
------
Terminate myLV

Safely terminating myLV attached to myCache
is difficult and that's why dm-lc provides these admin tools.
myLV can not detach from myCache
until all the dirty caches on myCache
are migrated to myBacking 

	lc-detach 1
	lc-daemon stop
	lc-free-cache 1
	lc-remove 1

3. Sysfs
========
dm-lc provides several sysfs interfaces
to control the module behavior.
