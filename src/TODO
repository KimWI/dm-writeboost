TODO:

- Get the GitExtract test so it's performance is similar to raw spindle.
- Write good documentation in Documentation/device-mapper/
  (e.g. How do we remove a cache? When should we use dm-writeboost rather than bcache or dm-cache)
- Provide an equivalent to the fsck tool to repair a damaged cache.
- Full code review by Mike Snitzer.
- Explore/implement read-caching support.
- Clean up the interfaces if needed.
  (e.g. Some input values should be limited in case user may choose too big values)

-------------------------------------------------------------------------

Project Ideas:

1. Add read caching feature
Device-Mapper maintainer Mike Snitzer said that
a single target should provide caching for both reads and writes.
(cf. http://www.redhat.com/archives/dm-devel/2014-January/msg00078.html)

To follow Mike's guide, I will implement read-caching for Writeboost.
The great idea is, at least conceptually,
sending back the read data to the write entrance.
I didn't notice this simple idea at that time of previous discussion.

This should be done background and
some threshold should be provided to determine
which sequence of data should be staged.

This feature will be implemented step-by-step.
I don't think this feature will change the interface drastically.

2. Improve initialization time
Some user complains that the initialization is too slow.

Any ideas?

3. Reduce metadata footprint
Writeboost has a hash table in RAM for cache management.
This isn't cheap.

Any ideas?

-------------------------------------------------------------------------

Please send any patches
To:
Akira Hayakawa <ruby.wktk@gmail.com>
Cc:
Greg Kroah-Hartman <gregkh@linuxfoundation.org>
driverdevel <driverdev-devel@linuxdriverproject.org>
Device-Mapper <dm-devel@redhat.com>
